<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--构造注入对比setter注入-->
    <!--
     何时使用构造注入，何时使用setter注入，经验法则是:强制依赖用构造，可选依赖用Setter。注意，在settter方法上使用
@Required注解即可令属性强制依赖。Spring 团队建议,构造注入的实例是不可变的，不为null的。此外，构造注入组件要将完全初始化
后的实例返回给客户端代码。还有，大量参数的构造函数是非常烂的，它意味着该类有大量的职责，得重构。
    setter注入主要用于可选依赖,类内部可以指定默认依赖。否则类内所有使用依赖的地方，都得进行非空校验。setter注入的有个好
处就是，类可以重配置或者再注入。因此，使用JMXMBeans进行管理的场景中，就非常适合setter注入。使用何种依赖注入方式，对于某
些类，非常有意义。有时协同第三方类处理，没有源码，由你来决定使用何种方式。比如，第三方类未暴露任何setter方法，
那么构造注入也许就是唯一的可行的注入方式了。
     -->
    <!-- 空属性，调用默认构造器-->
    <bean id="car" class="com.spring.ioc.bean.initBeans.Car"/>

    <!-- 设置name属性和alias属性-->
    <bean id = "carId" name="carName" class="com.spring.ioc.bean.initBeans.Car"/>
    <alias name="carId" alias="carIdAlias" />
    <alias name="carName" alias="carNameAlias"/>


    <!-- setter注入属性 -->
    <bean id="personWithProperties" class="com.spring.ioc.bean.initBeans.Person">
        <property name="id" value="1"/>
        <property name="name" value="lei"/>
        <property name="address" value="Hangzhou"/>
        <property name="sex" value="1"/>
        <property name="car" ref="car"/>
    </bean>

    <!-- 有参构造器注入-->
    <!--<bean id="personWithArgs" class="com.spring.ioc.bean.initBeans.Person">-->
    <!--<constructor-arg index="0" value="1"/>-->
    <!--<constructor-arg index="1" value="lei"/>-->
    <!--<constructor-arg index="2" value="1"/>-->
    <!--<constructor-arg index="3" value="Hangzhou"/>-->
    <!--<constructor-arg index="4" ref="car"/>-->
    <!--</bean>-->
    <!-- 有参构造器注入 按顺序填写-->
    <!--<bean id="personWithArgs" class="com.spring.ioc.bean.initBeans.Person">-->
    <!--<constructor-arg index="0" value="1"/>-->
    <!--<constructor-arg index="1" value="lei"/>-->
    <!--<constructor-arg index="2" value="1"/>-->
    <!--<constructor-arg index="3" value="Hangzhou"/>-->
    <!--<constructor-arg index="4" ref="car"/>-->
    <!--</bean>-->
    <!-- 按名称注入 -->
    <bean id="personWithArgs" class="com.spring.ioc.initBeans.Person">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="name" value="lei"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="address" value="Hangzhou"/>
        <constructor-arg name="car" ref="car"/>
    </bean>
    <!-- C标签 注入-->
    <bean id="personWithCTags" class="com.spring.ioc.initBeans.Person" c:_0="1" c:_1="lei" c:_2="1" c:_3="Hangzhou"
          c:_4-ref="car"></bean>

    <!-- 静态工厂方法注入-->
    <bean id="carStaticFactoryMethod" class="com.spring.ioc.initBeans.Car" factory-method="getCar"/>
    <bean id="personWithStaticFactoryMethod" class="com.spring.ioc.initBeans.Person">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="name" value="lei"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="address" value="Hangzhou"/>
        <constructor-arg name="car" ref="carStaticFactoryMethod"/>
    </bean>

    <!-- 实例工厂方法注入-->
    <bean id="carInstanceFactoryMethod" factory-bean="car" factory-method="getCarWithInstance"/>
    <bean id="personWithInstanceFactoryMethod" class="com.spring.ioc.initBeans.Person">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="name" value="lei"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="address" value="Hangzhou"/>
        <constructor-arg name="car" ref="carInstanceFactoryMethod"/>
    </bean>
</beans>